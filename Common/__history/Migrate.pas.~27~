unit Migrate;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, BaseDocked, Vcl.StdCtrls, RzLabel,
  Vcl.ExtCtrls, RzPanel, RzButton, Data.DB, Bde.DBTables;

type
  TBDETable = (tbProjects, tbSuppliers, tbExpenseTypes, tbExpenses);

  TfrmMigrate = class(TfrmBaseDocked)
    pnlProjects: TRzPanel;
    btnProjects: TRzShapeButton;
    pnlSuppliers: TRzPanel;
    btnSuppliers: TRzShapeButton;
    pnlExpenseTypes: TRzPanel;
    btnExpenseTypes: TRzShapeButton;
    pnlExpenses: TRzPanel;
    btnExpenses: TRzShapeButton;
    lblMigrationStatus: TLabel;
    procedure btnProjectsClick(Sender: TObject);
    procedure btnSuppliersClick(Sender: TObject);
    procedure btnExpenseTypesClick(Sender: TObject);
  private
    { Private declarations }
    procedure Migrate(table: TBDETable);
    procedure MigrateProjects(ATable: TTable);
    procedure MigrateSuppliers(ATable: TTable);
    procedure MigrateExpenseTypes(ATable: TTable);
  public
    { Public declarations }
  end;

var
  frmMigrate: TfrmMigrate;

implementation

{$R *.dfm}

uses
  AppData;

procedure TfrmMigrate.btnExpenseTypesClick(Sender: TObject);
begin
  Migrate(tbExpenseTypes);
end;

procedure TfrmMigrate.btnProjectsClick(Sender: TObject);
begin
  Migrate(tbProjects);
end;

procedure TfrmMigrate.btnSuppliersClick(Sender: TObject);
begin
  Migrate(tbSuppliers);
end;

procedure TfrmMigrate.Migrate(table: TBDETable);
var
  LTable: TTable;
begin
  LTable := TTable.Create(nil);

  LTable.DatabaseName := 'jtconstruction';

  try
    case table of
      tbProjects:
        begin
          LTable.TableName := 'PROJECTS.DB';
          MigrateProjects(LTable);
        end;

      tbSuppliers:
        begin
          LTable.TableName := 'SUPPLIERS.DB';
          MigrateSuppliers(LTable);
        end;

      tbExpenseTypes:
        begin
          LTable.TableName := 'EXPENSE_TYPES.DB';
          MigrateExpenseTypes(LTable);
        end;

      tbExpenses: ;
    end;
  finally
    LTable.Free;
  end;
end;

procedure TfrmMigrate.MigrateExpenseTypes(ATable: TTable);
begin
  with dmApplication.fdtExpenseTypes do
  begin
    try
      CachedUpdates := true;

      Open;

      lblMigrationStatus.Visible := true;

      ATable.Open;
      while not ATable.Eof do
      begin
        lblMigrationStatus.Caption := 'Migration in progress. ' +
                                      IntToStr(ATable.RecNo) + ' of ' + IntToStr(ATable.RecordCount) + '.';

        lblMigrationStatus.Update;

        Application.ProcessMessages;

        Append;
        FieldByName('PROJECT_NAME').AsString := ATable.FieldByName('ProjName').AsString;
        FieldByName('STATUS_ID').AsString := ATable.FieldByName('Status').AsString;
        FieldByName('PROJECT_ID').AsInteger := ATable.FieldByName('ProjId').AsInteger;
        Post;

        ATable.Next;
      end;

      ApplyUpdates;
      CommitUpdates;

      lblMigrationStatus.Caption := 'Migration done.';
    finally
      Close;
      ATable.Close;
      CachedUpdates := false;
    end;
  end;
end;

procedure TfrmMigrate.MigrateProjects(ATable: TTable);
begin
  with dmApplication.fdtProjects do
  begin
    try
      CachedUpdates := true;

      Open;

      lblMigrationStatus.Visible := true;

      ATable.Open;
      while not ATable.Eof do
      begin
        lblMigrationStatus.Caption := 'Migration in progress. ' +
                                      IntToStr(ATable.RecNo) + ' of ' + IntToStr(ATable.RecordCount) + '.';

        lblMigrationStatus.Update;

        Application.ProcessMessages;

        Append;
        FieldByName('PROJECT_NAME').AsString := ATable.FieldByName('ProjName').AsString;
        FieldByName('STATUS_ID').AsString := ATable.FieldByName('Status').AsString;
        FieldByName('PROJECT_ID').AsInteger := ATable.FieldByName('ProjId').AsInteger;
        Post;

        ATable.Next;
      end;

      ApplyUpdates;
      CommitUpdates;

      lblMigrationStatus.Caption := 'Migration done.';
    finally
      Close;
      ATable.Close;
      CachedUpdates := false;
    end;
  end;
end;

procedure TfrmMigrate.MigrateSuppliers(ATable: TTable);
begin
  with dmApplication.fdtSuppliers do
  begin
    try
      CachedUpdates := true;

      Open;

      lblMigrationStatus.Visible := true;

      ATable.Open;
      while not ATable.Eof do
      begin
        lblMigrationStatus.Caption := 'Migration in progress. ' +
                                      IntToStr(ATable.RecNo) + ' of ' + IntToStr(ATable.RecordCount) + '.';

        lblMigrationStatus.Update;

        Application.ProcessMessages;

        Append;
        FieldByName('SUPPLIER_NAME').AsString := ATable.FieldByName('SuppName').AsString;
        FieldByName('SUPPLIER_ID').AsInteger := ATable.FieldByName('SuppId').AsInteger;
        Post;

        ATable.Next;
      end;

      ApplyUpdates;
      CommitUpdates;

      lblMigrationStatus.Caption := 'Migration done.';
    finally
      Close;
      ATable.Close;
      CachedUpdates := false;
    end;
  end;
end;

end.
